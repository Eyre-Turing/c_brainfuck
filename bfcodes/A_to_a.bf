# 把大写字母转换为小写字母，其他不变
# 思路是使用6个字节：
# 第1个字节保存输入的内容
# 第2个字节保存数字26
# 第3、4、5个字节作为缓冲区
# 第3个字节主要是用于复制第1字节的内容
# 第4个字节主要是记录第2字节是否已经被清零（1表示被清零了，0表示还没有被清零）
# 第5个字节主要是复制第2个字节的内容
# 第6个字节记录输入是否在A到Z之间
# 输入后，开局先利用第3和第4字节，把第1子节移动到第3和第4字节，然后再把第4子节移动到第1字节。这样就成功把输入复制到第3字节了
# 然后把第一字节减去0x40，因为A的编码是0x41，如果这个时候能进入循环，就说明输入大于等于A
# 1）如果能进入循环，循环里每次第1字节和第2字节同时减1，如果是第1字节不后于第2字节被清零，说明输入小于等于Z；否则输入大于Z
# 2）如果不能进入循环，说明输入小于A

# 为了实现判断是否第1个字节不后于第2个字节清零，这里直接把第2个字节设置为27，这样就只需要判断第1个字节是否不先于第2个字节清零了

,  # 获取第一个输入
[
# 能进入到这里，说明标准输入没有结束
> [-] ++++++++++ ++++++++++ +++++++ > [-] > [-] > [-] > [-] <<<<<    # 初始化，设置第2字节为27，第3、4、5、6字节为0

[- >> + > + <<<]   # 把输入移动到第3和第4字节

>>> [- <<< + >>>] <<<    # 把第4字节移动到第1字节（这样一来，结合上一步，就成功的把输入复制到第3字节了）

---------------- ---------------- ---------------- ----------------    # 输入减去0x40

[
  # 能进入这里，说明输入的字符大于等于A
  -
  > - >> [-] + > [-] > [-] + <<<<    # 让第4字节和第6字节为1，这样表示默认标记第2字节已经被清零；标记输入在A到Z之间
  [
    # 能进入这里，说明26未被清零
    >> [-] <<  # 把第4字节设置为0，即记录第2字节未被清零
    [- >>> + <<<]  # 把第2字节的内容移动到第5字节，因为循环要结束必须把第2字节弄成0
  ]
  >>> [- <<< + >>>] <<<  # 把第5字节的内容移动到第2字节
  >> [  # 移动到第4字节，这个字节标记了第2字节是否被清零
    # 能进入这里，说明26已经没了（也就是说，输入的字符大于Z）
    >> [-] <<  # 设置第6字节为0，因为输入已经大于Z了
    <<< [-] >>>
    [-]
  ] <<
  <
]

>>>>> [
  # 能进入这里，说明输入的字符在A到Z之间（包括A和Z）
  <<< ++++++++++++++++ ++++++++++++++++ >>>  # 就给它加上0x20，因为小写字母是对应大写字母加0x20
  [-]
] <<<<<

>> . <<
,]  # 循环获取输入
